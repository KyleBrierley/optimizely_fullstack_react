'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _highlight = require('highlight.js');

var Highlight = _interopRequireWildcard(_highlight);

var _clipboard = require('clipboard');

var _clipboard2 = _interopRequireDefault(_clipboard);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copies the provided code when clicking on a copy button. It uses
 * clipboard.js to copy the text and hackily adds a temporary DOM node to
 * add a listener and simulate a click in order to get around weird
 * clipboard.js restrictions.
 * @param {Object} event - Click event
 * @param {String} code - Code to be copied
 */
var onCopyClick = function onCopyClick(event, code) {
  // Create a temporary element to serve as a click handler for clipboard.js.
  var button = event.target;
  var temporaryListenerNode = button.parentNode.insertBefore(document.createElement('button'), button);

  var clipboardListener = new _clipboard2.default(temporaryListenerNode, {
    text: function text() {
      return code;
    }
  });

  // Simulate a click on the temporary listener.
  temporaryListenerNode.click();

  // Clean up all the mess.
  clipboardListener.destroy();
  temporaryListenerNode.remove();
};

var CopyButton = function CopyButton(code, testSection) {
  var buttonTestSection = testSection ? testSection + '-copy-button' : null;

  return _react2.default.createElement(
    'div',
    { style: { position: 'absolute', right: 0 } },
    _react2.default.createElement(
      _Button2.default,
      {
        style: 'plain',
        onClick: function onClick(event) {
          onCopyClick(event, code);
        },
        testSection: buttonTestSection },
      'Copy'
    )
  );
};

var HighlightedCode = function HighlightedCode(code, isHighlighted, language, className, testSection) {
  var dangerouslySetInnerHTML = null;

  if (isHighlighted) {
    // Code that uses syntax highlighting needs to have
    // `dangerouslySetInnerHTML` set so that the HTML returned is displayed.
    require('highlight.js/styles/docco.css');

    dangerouslySetInnerHTML = {
      __html: language ? Highlight.highlight(language, code).value : Highlight.highlightAuto(code).value
    };
    code = null;
  }

  return (
    /* eslint-disable react/no-danger */
    _react2.default.createElement(
      'code',
      {
        className: className,
        'data-test-section': testSection,
        dangerouslySetInnerHTML: dangerouslySetInnerHTML },
      code
    )
    /* eslint-enable react/no-danger */

  );
};

/**
 * Display code either inline or in its own block.
 * @param {Object} props - Properties passed to component
 * @returns {ReactElement}
 */
var Code = function Code(props) {
  if (props.type === 'inline') {
    return HighlightedCode(props.children, props.isHighlighted, props.language, 'oui-code', props.testSection);
  }

  return _react2.default.createElement(
    'div',
    { className: 'position--relative' },
    props.hasCopyButton ? CopyButton(props.children, props.testSection) : null,
    _react2.default.createElement(
      'pre',
      {
        className: 'oui-pre',
        'data-test-section': props.testSection },
      HighlightedCode(props.children, props.isHighlighted, props.language)
    )
  );
};

Code.propTypes = {
  /** The code within the component */
  children: _react2.default.PropTypes.string.isRequired,
  /** Adds a copy button to code examples */
  hasCopyButton: _react2.default.PropTypes.bool,
  /** Apply syntax highlighting to the code */
  isHighlighted: _react2.default.PropTypes.bool,
  /** Specify a language for the syntax highlighter */
  language: _react2.default.PropTypes.oneOf(['css', 'diff', 'html', 'java', 'javascript', 'js', 'jsx', 'markdown', 'md', 'objectivec', 'php', 'ruby', 'scss', 'swift']),
  /** Hook for automated JavaScript tests */
  testSection: _react2.default.PropTypes.string,
  /** How the code should be displayed */
  type: _react2.default.PropTypes.oneOf(['inline', 'block']).isRequired
};

exports.default = Code;